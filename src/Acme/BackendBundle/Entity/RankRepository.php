<?php

namespace Acme\BackendBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Acme\BackendBundle\Entity\Constant;

/**
 * RankRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RankRepository extends EntityRepository
{
    public function getArrNewestRankList($intZone, $intCount, $intTermNo)
    {
        $strTop = $intZone==0?"intTopRankPRC":"intTopRankHKTW";
        return $this->getEntityManager()
            ->createQuery(
                "SELECT s.strTitle title,
                        s.arrStrArtistName artists,
                        s.id id,
                        s.{$strTop} top,
                        s.strCorpName corp,
                        r.intIndex rank_index,
                        r.intLastIndex last_rank_index,
                        r.intCountOnList count_on_list,
                        r.intScore score,
                        r.boolIsPrePlus is_pre,
                        s.strSongFile file,
                        {$intTermNo} term_no,
                        COUNT(l.id) champion_count
                    FROM
                    AcmeBackendBundle:Rank r
                    JOIN r.song s
                    JOIN AcmeBackendBundle:RankLog l
                    WITH r.intTermNo = l.intTermNo
                    WHERE r.intZone = {$intZone}
                    AND r.intTermNo = {$intTermNo}
                    GROUP BY title, artists, id, top, corp, file, rank_index, last_rank_index, count_on_list, score
                             , is_pre
                    ORDER BY r.intIndex ASC
                    "
            )
            ->setMaxResults($intCount)
            ->getResult();
    }

    public function generateRank($arrIntTerm)
    {
        return $this->getEntityManager()
            ->createQuery(
            "
                UPDATE AcmeBackendBundle:Rank r
                (r.intTermNo, r.intScore, r.intZone, r.intIndex, r.intLastIndex, r.intCountOnList, r.song_id)
                SELECT
                {$arrIntTerm[0]},
                    (
                        SELECT COUNT*4*(11-lv.intIndex)+(CASE WHEN(
                            s.boolIsPremirere = true
                        ) THEN 300 ELSE 0 END)
                         FROM AcmeBackendBundle:Votelog lv WHERE intTermNo = {$arrIntTerm[0]} AND lv.intSongId = s.id
                            AND lv.intZone = 0
                    ) AS score,
                    0,
                    1,
                    1,
                    (
                        SELECT COUNT FROM AcmeBackendBundle:Rank lr WHERE lr.song_id = s.id AND lr.intTermNo < {$arrIntTerm{0}}
                    ) AS intCountRank,
                    {$arrIntTerm[0]} AS song_id
                FROM AcmeBackendBundle:Song s


            "
            )
            ->execute();
    }
}
