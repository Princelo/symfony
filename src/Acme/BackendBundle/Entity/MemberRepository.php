<?php

namespace Acme\BackendBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository implements UserProviderInterface
{
    public function getArrMemberList($intType, $intLimit, $strOrderBy, $strOrderType)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT m
                    FROM
                    AcmeBackendBundle:Member m
                    WHERE m.intType = {$intType}
                    ORDER BY m.{$strOrderBy} {$strOrderType}
                    "
            )
            ->setMaxResults($intLimit)
            ->getResult();
    }

    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeBackendBundle:Member object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }

    public function synCorpData($id){
        return $this->getEntityManager()
            ->createQuery(
                "INSERT INTO AcmeBackendBundle:Member m
                (email, password, strFullName, strShortName, intProviceId, intCityId, strAddressInfo, strZipCode,
                strTel, arrStrArtistName, strIntro, strUserName, strUserNickName, intUserGender, strUserCitizenId,
                strUserMobile, strUserTel, strUserQQ, strCardPhoto, strBodyPhoto)
                SELECT email, password, strFullName, strShortName, intProviceId, intCityId, strAddressInfo, strZipCode,
                strTel, arrStrArtistName, strIntro, strUserName, strUserNickName, intUserGender, strUserCitizenId,
                strUserMobile, strUserTel, strUserQQ, strCardPhoto, strBodyPhoto
                FROM AcmeBackendBundle:Corp c WHERE id = {$id}"
            )
            ->execute();
    }

    public function strCheckUniqueEmail($strEmail)
    {
        return $this->getEntityManager()
            ->createQuery("
            SELECT COUNT(m) FROM AcmeBackendBundle:Member m WHERE m.email = :email
            ")
            ->setParameter('email', $strEmail)
            ->getSingleScalarResult();
    }

    public function getArrFMList($intCount, $strOrderField, $strOrderType)
    {
        return $this->getEntityManager()
            ->createQuery(
            "
                SELECT m.strShortName fm_name,
                    m.id    id
                FROM
                    AcmeBackendBundle:Member m
                WHERE m.intType = " . Constant::FM . "
                AND
                    m.boolIsValid = TRUE
                ORDER BY m.{$strOrderField} {$strOrderType}
            "
            )
            ->setMaxResults($intCount)
            ->getResult();
    }
}
